stream type WaylandSource
{
    client_new(pid: int);
    client_exit(pid: int);
}

stream type WaylandConnection(pid: int)
{
    pointer_motion(time: uint32_t, x: uint32_t, y : uint32_t);
    keyboard_key(serial: uint32_t, time: uint32_t, key: uint32_t, pressed: uint8_t);
}

stream processor WaylandProcessor
: WaylandSource -> WaylandConnection extends FORWARD
{
    on client_new(pid) creates WaylandConnection(pid) to autodrop(@BUFSIZE)
    	include in WaylandConnections forward;
}

buffer group WaylandConnections : WaylandConnection
event source Clients : WaylandSource process using WaylandProcessor to autodrop(256)



stream type LibinputSource
{
    keyboard_key(time: double, key: uint32_t, pressed: uint8_t);
}

event source Libinput : LibinputSource to autodrop(@BUFSIZE)


stream type GlobalEvent
{
    key(timestamp: uint64_t, key: uint32_t);
}

globals
$$
#include <wayland-util.h>
$$

arbiter : GlobalEvent
{
    choose first 1 C from WaylandConnections
    {
        on C : keyboard_key(serial, time, key, pressed) |
        $$
            printf("[%i] key(serial=%u, time: %u, key=%u, pressed=%u)\n",
		   $C.pid;, serial, time, key, pressed);
        $$

        on C : pointer_motion(time, x, y) |
        $$
            printf("[%i] motion(time=%u, x=%f, y=%f)\n",
		   $C.pid;, time,
		   wl_fixed_to_double(x),
		   wl_fixed_to_double(y));
        $$
    }
}

monitor {
	on key(ts, key) where $$ true $$
	$$
		printf("Event\n");
	$$
}
